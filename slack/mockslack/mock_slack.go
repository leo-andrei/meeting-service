// Code generated by MockGen. DO NOT EDIT.
// Source: slack/slack.go

// Package mockslack is a generated GoMock package.
package mockslack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSlackClientInterface is a mock of SlackClientInterface interface.
type MockSlackClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientInterfaceMockRecorder
}

// MockSlackClientInterfaceMockRecorder is the mock recorder for MockSlackClientInterface.
type MockSlackClientInterfaceMockRecorder struct {
	mock *MockSlackClientInterface
}

// NewMockSlackClientInterface creates a new mock instance.
func NewMockSlackClientInterface(ctrl *gomock.Controller) *MockSlackClientInterface {
	mock := &MockSlackClientInterface{ctrl: ctrl}
	mock.recorder = &MockSlackClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackClientInterface) EXPECT() *MockSlackClientInterfaceMockRecorder {
	return m.recorder
}

// PostMessage mocks base method.
func (m *MockSlackClientInterface) PostMessage(channelID, username, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", channelID, username, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockSlackClientInterfaceMockRecorder) PostMessage(channelID, username, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockSlackClientInterface)(nil).PostMessage), channelID, username, message)
}
